"use strict"; /* eslint-env browser */
/* global Toastify */

/**
 * This file was ejected from expo via `expo customize:web`. The additions are
 * marked between DRAFTBIT CUSTOM comments. The rest of the code is generated by
 * expo, and we should consider upstreaming fixes, re-ejecting, and re-adding
 * our custom code versus just fixing here.
 *
 * This file is a registration script, and it is executed by the browser at the
 * 'installing' stage of the service worker lifecycle.
 *
 * This script executes in the page's global scope, and so has access to modules
 * available at top level. For example, the Toastify library used below, which
 * is loaded in index.html.
 *
 * Highly reccomended that you use Chrome or Chromium to debug, as the tools are
 * much better.
 *
 * If you are unfamiliar with service workers, you should considering talking to
 * someone who is before making changes. Many of your assumptions are incorrect.
 * For example, service worker's require a very particular API to be invoked to
 * perform async functions at specific points in their lifecycle. It might just
 * work because you were lucky and won a race, that customers might lose and see
 * hard to diagnose bugs.
 *
 * Some helpful references:
 *  - ../webpack.config.js (contains settings)
 *  - ./expo-service-worker.js (controls behavior of worker)
 *  - Workbox (webpack plugin that does most of the hard work)
 *    - https://developers.google.com/web/tools/workbox
 *  - Service Workers: An introduction (specifically the lifecycle page)
 *    - https://developers.google.com/web/fundamentals/primers/service-workers
 */

/* BEGIN DRAFTBIT CUSTOM */

/**
 * Trigger a toast notification prompting the user to upgrade to the newest
 * version.
 */
function promptForRefresh(reg) {
  if (!navigator.serviceWorker.controller) {
    // Workaround for safari lifecycle weirdness that happens when there was
    // previously no service worker (i.e., no controller)
    return;
  }

  // Create a simple html node for Toastify to use, that we can target with our
  // own styles. See index.html for that css.
  let node = document.createElement("div");
  let but = document.createElement("button");
  let msg = document.createElement("div");
  but.innerText = "Update";
  but.className = "confirm";

  msg.className = "msg";
  msg.innerText = "A new version is available!";
  node.className = "container";
  node.appendChild(but);
  node.appendChild(msg);

  const toast = Toastify({
    duration: -1,
    // that is, forever
    node,
    className: "sw-update-toast",
    position: "right",
    gravity: "bottom"
  });

  but.onclick = () => {
    reg.waiting.postMessage("skipWaiting");
    toast.hideToast();
  };

  toast.showToast();
}
/**
 * Register a callback that closes over the current service worker registration
 * class and waits for the event corresponding with a new service worker being
 * ready to be activated (that is, in the lifecycle, it is installed but
 * "waiting" to be active).
 */
function listenForWaitingServiceWorker(reg, callback) {
  // Lazy register the callback on the installed event...
  function awaitStateChange() {
    reg.installing.addEventListener("statechange", function () {
      if (this.state === "installed") {
        callback(reg);
      }
    });
  }

  // ...but not if registration failed..
  if (!reg) {
    return;
  }

  // ... and not if we're already waiting (eagerly invoke callback)...
  if (reg.waiting) {
    return callback(reg);
  }

  // ... immediately if we're already installing...
  if (reg.installing) {
    awaitStateChange();
  }

  // ... or in all other cases, wait until we see a new update.
  reg.addEventListener("updatefound", awaitStateChange);
}

/**
 * debounce copied from underscore.js under MIT license.
 */
function debounce(func, wait, immediate) {
  /* eslint-disable */
  var timeout;
  return function () {
    var context = this,
      args = arguments;

    var later = function () {
      timeout = null;
      if (!immediate) func.apply(context, args);
    };

    var callNow = immediate && !timeout;
    clearTimeout(timeout);
    timeout = setTimeout(later, wait);
    if (callNow) func.apply(context, args);
  };
  /* eslint-enable */
}

// TODO(pckilgore): Most of these logs below are "standard" when ejecting (or
// not ejecting, for that matter). However, consider removing some of the noiser
// ones if this has been working without issues for a while.

/* eslint-disable no-console */

/* END DRAFTBIT CUSTOM */

if ("serviceWorker" in navigator) {
  window.addEventListener("load", function () {
    navigator.serviceWorker.
    register("SW_PUBLIC_URL/expo-service-worker.js", {
      scope: "SW_PUBLIC_SCOPE"
    })
    /* DRAFTBIT CUSTOM */.
    then(function (reg) {
      // Trigger prompt when new worker ready.
      listenForWaitingServiceWorker(reg, promptForRefresh);

      // Normally a browser will check for a new service worker (that is,
      // a new app) on navigation, or at minimum, every 24 hours.  It will
      // also check on certain events, but whether those occur is largely
      // outside our control.
      //
      // But Apps are SPAs, so no nav events.
      //
      // Instead, below, we trigger checks on touch/click events. Polling
      // doesn't seem to work for Chrome.  We debounce those checks to every
      // one minute.
      //
      // TODO(pckilgore): Consider "development" vs. "production" builds, and
      // only enable frequent checks like this in development builds.

      let debouncedUpdateSW = debounce(
        () => {
          console.log("Checking for new version...");

          try {
            reg.update();
          } catch (e) {
            console.groupCollapsed("Error fetching new service worker.");
            console.error(e);
            console.groupEnd();
          }
        },
        60000,
        true
      );
      document.addEventListener("click", () => {
        debouncedUpdateSW();
      });

      // Ensure refresh is only called once.
      // This works around a bug in "force update on reload" in chrome.
      var refreshing;
      navigator.serviceWorker.addEventListener(
        "controllerchange",
        function handleControllerChange() {
          if (refreshing) {
            return;
          }
          refreshing = true;
          window.location.reload();
        }
      );
    })
    /* END DRAFTBIT CUSTOM */.
    catch(function (error) {
      console.info("Failed to register service-worker", error);
    });
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,