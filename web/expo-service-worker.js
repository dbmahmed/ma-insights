"use strict"; /* eslint-env serviceworker */

/**
 * This file was ejected from expo via `expo customize:web`. The additions are
 * marked between DRAFTBIT CUSTOM comments. The rest of the code is generated by
 * expo, and we should consider upstreaming fixes, re-ejecting, and re-adding
 * our custom code versus just fixing here.
 *
 * This file is a service worker.  It is kept by the browser in its own global
 * context, separate from the page, and has several specific global API's
 * available, like `self`.
 *
 * If you are unfamiliar with service workers, you should considering talking to
 * someone who is before making changes. Many of your assumptions are incorrect.
 * For example, browsers may sleep execution of this file, so any timer you set
 * here is going to be break for users, but is very unlikely to break in
 * development because you'll usually be idleing on the page (and so the browser
 * is unlikely to sleep the worker).
 *
 * Some helpful references:
 *  - ../webpack.config.js (contains settings)
 *  - ./register-service-worker.js (configures behavior of worker lifecycle)
 *  - Workbox (webpack plugin that does most of the hard work)
 *    - https://developers.google.com/web/tools/workbox
 *  - Service Workers: An introduction (specifically the lifecycle page)
 *    - https://developers.google.com/web/fundamentals/primers/service-workers
 */

/**
 * Store notification icon string in service worker.
 * Ref: https://stackoverflow.com/a/35729334/2603230
 */
self.addEventListener("message", (event) => {
  /* BEGIN DRAFTBIT CUSTOM */
  if (event.data === "skipWaiting") {
    // Handle a request from the browser that we load the new version of the
    // app, that is, skip waiting for app to shutdown before loading the new
    // service worker.  This will trigger a page refresh.
    //
    // We return, because otherwise expo code below will pop this as a
    // notification.
    return skipWaiting();
  }
  /* END DRAFTBIT CUSTOM */

  let data;
  if (typeof event.data === "string") {
    try {
      data = JSON.parse(event.data);
    } catch (e) {}
  }

  if (data && data.fromExpoWebClient) {
    self.notificationIcon = data.fromExpoWebClient.notificationIcon;
  }
});

/**
 * Add support for push notification.
 */
self.addEventListener("push", (event) => {
  let payload = {};
  try {
    payload = event.data.json();
  } catch (e) {
    // If `event.data.text()` is not a JSON object, we just treat it
    // as a plain string and display it as the body.
    payload = { title: "", body: event.data.text() };
  }

  const title = payload.title;
  const data = payload.data || payload.custom || {};
  const options = {
    body: payload.body,
    data
  };
  options.icon = data._icon || payload.icon || self.notificationIcon || null;
  options.image =
  data._richContent && data._richContent.image ?
  options.data._richContent.image :
  payload.image;
  options.tag = data._tag || payload.collapseKey;
  if (options.tag) {
    options.renotify = data._renotify;
  }

  event.waitUntil(self.registration.showNotification(title, options));
});

// https://developer.mozilla.org/en-US/docs/Web/API/Clients
self.addEventListener("notificationclick", (event) => {
  event.notification.close();

  event.waitUntil(
    (async () => {
      const allClients = await self.clients.matchAll({
        includeUncontrolled: true
      });

      let appClient;

      const path = event.notification.data._webPath || "/";

      // If we already have a window open, use it.
      for (const client of allClients) {
        const url = new URL(client.url);

        if (url.pathname === path) {
          client.focus();
          appClient = client;
          break;
        }
      }

      // If there is no existing window, open a new one.
      if (!appClient) {
        appClient = await self.clients.openWindow(path);
      }

      // Message the client:
      // `origin` will always be `'selected'` in this case.
      // https://docs.expo.io/versions/latest/sdk/notifications/#notification
      appClient.postMessage({
        origin: "selected",
        data: event.notification.data,
        remote: !event.notification._isLocal
      });
    })()
  );
});

// TODO: Consider cache: https://github.com/expo/expo-cli/pull/844#issuecomment-515619883
// Import the script generated by workbox.
self.importScripts("service-worker.js");
//# sourceMappingURL=data:application/json;charset=utf-8;base64,